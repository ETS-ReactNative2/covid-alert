import React, { Component } from "react";
import {
  Alert,
  View,
  Text,
  Image,
  Linking,
  TouchableOpacity,
  Platform
} from "react-native";
import {
  check,
  request,
  checkNotifications,
  requestNotifications,
  openSettings,
  PERMISSIONS,
  RESULTS
} from "react-native-permissions";
import BackgroundGeolocation from "@mauron85/react-native-background-geolocation";
import PushNotification from "react-native-push-notification";
import styles from "./App.styles";
// import checkCoords from './check-coords';

const B = props => <Text style={styles.bold}>{props.children}</Text>;

export default class extends Component {
  constructor(props) {
    super(props);

    this.state = {
      hasLocation: false,
      hasPush: false
    };

    this.requestLocation = this.requestLocation.bind(this);
    this.requestPush = this.requestPush.bind(this);
    this.startLocation = this.startLocation.bind(this);
    this.startPush = this.startPush.bind(this);
  }

  componentDidMount() {
    Promise.all([
      check(
        Platform.select({
          android: PERMISSIONS.ANDROID.ACCESS_FINE_LOCATION,
          ios: PERMISSIONS.IOS.LOCATION_ALWAYS
        })
      ),
      checkNotifications()
    ]).then(([locationStatus, pushStatus]) => {
      console.log("location", locationStatus);
      console.log("push", pushStatus);

      if (locationStatus === RESULTS.GRANTED && !this.state.hasLocation) {
        console.log("Location permission granted");

        this.setState({ hasLocation: true });
        this.startLocation();
      } else {
        console.log("Location permission denied");

        this.requestLocation();
      }

      if (
        pushStatus.settings.alert &&
        pushStatus.status === RESULTS.GRANTED &&
        !this.state.hasPush
      ) {
        console.log("Push permission granted");

        this.setState({ hasPush: true });
        this.startPush();
      } else {
        console.log("Push permission denied");

        this.requestPush();
      }
    });
  }

  requestLocation() {
    console.log("Requesting location permission");

    return request(
      Platform.select({
        android: PERMISSIONS.ANDROID.ACCESS_FINE_LOCATION,
        ios: PERMISSIONS.IOS.LOCATION_ALWAYS
      })
    )
      .then(res => {
        if (res === RESULTS.GRANTED && !this.state.hasLocation) {
          this.setState({ hasLocation: true });
          this.startLocation();
        } else {
          openSettings();
        }
      })
      .catch(err => console.log(err));
  }

  requestPush() {
    console.log("Requesting push permission");

    return requestNotifications(["alert", "sound"]).then(
      ({ settings, status }) => {
        if (
          settings.alert &&
          status === RESULTS.GRANTED &&
          !this.state.hasPush
        ) {
          this.setState({ hasPush: true });
          this.startPush();
        } else {
          openSettings();
        }
      }
    );
  }

  startLocation() {
    console.log("Starting location");

    BackgroundGeolocation.configure({
      desiredAccuracy: BackgroundGeolocation.HIGH_ACCURACY,
      stationaryRadius: 50,
      distanceFilter: 50,
      notificationTitle: "Background tracking",
      notificationText: "enabled",
      debug: false,
      startOnBoot: false,
      stopOnTerminate: false,
      locationProvider: BackgroundGeolocation.DISTANCE_FILTER_PROVIDER,
      interval: 10000,
      fastestInterval: 5000,
      activitiesInterval: 10000,
      stopOnStillActivity: false,
      stopTimeout: 1
    });

    BackgroundGeolocation.on("location", location => {
      console.log("[LOCATION]", location);

      BackgroundGeolocation.startTask(taskKey => {
        requestAnimationFrame(() => {
          // const results = checkCoords(location.latitude, location.longitude);
          // console.log(results);

          const results = false;

          if (results) {
            PushNotification.localNotification({
              /* Android Only Properties */
              id: "0", // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
              ticker: "My Notification Ticker", // (optional)
              autoCancel: true, // (optional) default: true
              largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
              smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
              bigText:
                "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
              subText: "This is a subText", // (optional) default: none
              color: "red", // (optional) default: system default
              vibrate: true, // (optional) default: true
              vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
              tag: "some_tag", // (optional) add tag to message
              group: "group", // (optional) add group to message
              ongoing: false, // (optional) set whether this is an "ongoing" notification
              priority: "high", // (optional) set notification priority, default: high
              visibility: "private", // (optional) set notification visibility, default: private
              importance: "high", // (optional) set notification importance, default: high

              /* iOS only properties */
              // alertAction: // (optional) default: view
              // category: // (optional) default: null
              // userInfo: // (optional) default: null (object containing additional notification data)

              /* iOS and Android properties */
              title: "My Notification Title", // (optional)
              message: "My Notification Message", // (required)
              playSound: false, // (optional) default: true
              soundName: "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
              number: "10", // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
              repeatType: "day", // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
              actions: '["Yes", "No"]' // (Android only) See the doc for notification actions to know more
            });
          }
        });
        BackgroundGeolocation.endTask(taskKey);
      });
    });

    BackgroundGeolocation.on("error", error => {
      console.log("Location error", error);
    });

    BackgroundGeolocation.on("start", () => {
      console.log("Location service has been started");
    });

    BackgroundGeolocation.on("stop", () => {
      console.log("Location service has been stopped");
    });

    BackgroundGeolocation.checkStatus(status => {
      console.log("Location service is running", status.isRunning);
      console.log("Location services enabled", status.locationServicesEnabled);
      console.log("Location auth status: " + status.authorization);

      if (!status.isRunning) {
        BackgroundGeolocation.start();
      }
    });
  }

  startPush() {
    console.log("Starting push");

    PushNotification.configure({
      // Required: called when a remote or local notification is opened or received
      onNotification: notification => {
        console.log("NOTIFICATION:", notification);

        // required on iOS only (see fetchCompletionHandler docs: https://github.com/react-native-community/react-native-push-notification-ios)
        notification.finish(PushNotificationIOS.FetchResult.NoData);
      },
      permissions: {
        alert: true,
        badge: true,
        sound: true
      },
      popInitialNotification: false,
      requestPermissions: false
    });
  }

  openInBrowser(url) {
    Linking.openURL(url).catch(err => console.error("Couldn't load page", err));
  }

  componentWillUnmount() {
    BackgroundGeolocation.removeAllListeners();
  }

  render() {
    const isSetup = this.state.hasLocation && this.state.hasPush;

    return (
      <View style={styles.background}>
        <Text style={styles.title}>Coronavirus Mapper</Text>
        {isSetup && (
          <View style={styles.radarContainer}>
            <Image
              style={styles.radarLogo}
              source={require("../assets/images/radar.png")}
              resizeMode="contain"
            />
            <Text style={styles.radarText}>Actively Scanning</Text>
          </View>
        )}
        <Text style={styles.body}>
          This app will <B>anonymously</B> track your location in the background
          and send a notification to your phone when youâ€™re close to known
          previous locations of Coronavirus victims.{" "}
          <B>In order to work, please keep this app open on your phone.</B>
        </Text>
        {!isSetup && (
          <View>
            <Text style={styles.body}>To get started please:</Text>
            {!this.state.hasLocation && (
              <Text style={styles.link} onPress={this.requestLocation}>
                Enable location sharing (always)
              </Text>
            )}
            {!this.state.hasPush && (
              <Text style={styles.link} onPress={this.requestPush}>
                Enable push notifications
              </Text>
            )}
          </View>
        )}
        {/* TODO: This needs to be a real link */}
        {isSetup && (
          <View>
            <Text
              style={styles.link}
              onPress={() => this.openInBrowser("https://google.com")}
            >
              How do we protect your privacy?
            </Text>
            <Text
              style={styles.link}
              onPress={() =>
                this.openInBrowser("https://opencollective.com/openmined")
              }
            >
              How can I support this app?
            </Text>
          </View>
        )}
        <TouchableOpacity
          style={styles.footer}
          onPress={() => this.openInBrowser("https://openmined.org")}
        >
          <Text style={styles.footerText}>Built by volunteers at</Text>
          <Image
            style={styles.openMinedLogo}
            source={require("../assets/images/openmined-logo.png")}
            resizeMode="contain"
          />
        </TouchableOpacity>
      </View>
    );
  }
}
